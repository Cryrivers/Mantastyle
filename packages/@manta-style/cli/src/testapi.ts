// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

// tslint:disable
export type ApiStatus =
  | "ok"
  | "invalid parameter"
  | "lack parameter"
  | "execution failure"
  | "no data available"
  | "call soup API error"
  | "need login"
  | "no permission"
  | "no user"
  | "expired sso key"
  | "unknown reason";
/**
 * category of metric
 */
export type Category = "event" | "realtime" | "historical";
/**
 * data for one chart
 */
export interface ChartData {
  /**
   * only valid if realtime
   * @example 0.0283
   */
  increaseRateAgainstD1?: number; // float64
  /**
   * only valid if realtime
   * @example -0.0368
   */
  increaseRateAgainstD7?: number; // float64
  lines: {
    /**
     * @keyExample D0
     * @keyExample D1
     * @keyExample D7
     */
    [name: string]: Line;
  };
  test: { [key in ApiStatus]: Line };
  /**
   * for realtime,it is current value of metric;for historical, it should be the sum of all historical values.
   * @example 273394
   */
  value: number; // float64
}
/**
 * only the dimension chart is viewed by will show up , one line coorresponds to one value of the dimension.
 */
export interface ChartLine {
  lineData?: Point[];
  /**
   * this field might be the value of country, platform, paymentMethod, loginStatus, timeRange
   */
  lineDimension?: string;
}
/**
 * the request body tells how to query elastic search to get chart data.
 */
export interface ChartRequestBody {
  category: Category;
  dimensionSetting: DimensionSetting;
  /**
   * @example impression
   */
  eventName?: string;
  metricName: MetricName;
  /**
   * @example home
   */
  pageName?: string;
  /**
   * @example top_product
   */
  sectionName?: string;
  /**
   * @example cluster
   */
  targetName?: string;
  timeEnd: string;
  timeStart: string;
  xType: XType;
  /**
   * this field is only needed
   */
  xValues: string[];
}
export type ChartType = "lineChart" | "histogram" | "pieChart";
export type Country = "SG" | "VN" | "ID" | "MY" | "PH" | "TH" | "TW";
export interface Dashboard {
  /**
   * @example 1
   */
  dashboardId?: number; // int32
  /**
   * @example my dashboard
   */
  dashboardName?: string;
}
export type Day = "D0" | "D1" | "D7";
/**
 * realtime metric is always viewed by dimension timeRange.
 */
export type Dimension =
  | "country"
  | "platform"
  | "paymentMethod"
  | "loginStatus"
  | "userSource"
  | "day";
/**
 * for realtime, always view by timeRange and filters by country
 */
export interface DimensionSetting {
  filters: Filter[];
  viewBy: Dimension;
  /**
   * this tells all the possible values of the dimension which is chose as viewBy
   * @example TW
   * @example SG
   */
  viewByValues: string[];
}
export type EventMappingTable = {
  /**
   * @example Flashsale Landing Page
   */
  page?: string;
  /**
   * @example Whole Page
   */
  section?: string;
  /**
   * @example Whole Page
   */
  target?: string;
  /**
   * @example Pageview
   */
  event?: string;
}[];
export interface Filter {
  /**
   * @example platform
   */
  field: string;
  operator: "eq" | "nq";
  values?: string[];
}
export type Line = {
  /**
   * @example 2018-12-15
   */
  x: string;
  y: number;
}[];
export interface LoginResponse {
  content: string;
  /**
   * @example u1sw4qc6lvwogkq16z05bxr726yijgv64gycfw3u
   */
  sso_key: string;
  user: {
    /**
     * @example zhouz
     */
    username?: string;
    /**
     * @example 100
     */
    userid?: number;
    /**
     * @example zhouz@seagroup.com
     */
    email?: string;
  };
}
export type LoginStatus = "login" | "logout";
export interface Metric {
  displayName: string;
  metricCategories: Category[];
  metricDefinition: string;
  /**
   * here dimension stores this metric's dimension and all its possible values in an array.
   */
  metricDimensions: {
    country?: Country[];
    platform?: Platform[];
    paymentMethod?: PaymentMethod[];
    loginStatus?: LoginStatus[];
    userSource?: UserSource[];
  };
  metricName: MetricName;
  metricType: MetricType;
}
/**
 * one metric card contains only one metric with its setting(dimension, timerange, category)
 */
export interface MetricCard {
  category: Category;
  chartType: ChartType;
  dimensionSetting: DimensionSetting;
  /**
   * @example impression
   */
  eventName?: string;
  /**
   * @example 1
   */
  metricCardColumn?: number;
  /**
   * @example 1
   */
  metricCardId: number; // int32
  /**
   * @example shopping_cart/ymal/item/impression
   */
  metricCardName: string;
  metricName: MetricName;
  /**
   * @example shopping_cart
   */
  pageName?: string;
  /**
   * @example ymal
   */
  sectionName?: string;
  /**
   * @example item
   */
  targetName?: string;
  timeRange?: TimeRange;
  xType: XType;
}
export type MetricName =
  | "EventCount"
  | "ConcurrentUsers"
  | "NewRegisteredUsers"
  | "DailyActiveUsers"
  | "GrossOrders"
  | "PaidOrders"
  | "CompletedOrders"
  | "GMVofGrossOrders"
  | "GMVofPaidOrders"
  | "GMVofCompleteOrders"
  | "GrossOrdersABS"
  | "PaidOrdersABS"
  | "CompletedOrdersABS"
  | "ConversionRate"
  | "PaidBuyer";
/**
 * the type of a metric
 */
export type MetricType = "currency" | "number" | "percentage";
export type PaymentMethod =
  | "PAY_NONE"
  | "PAY_CYBERSOURCE"
  | "PAY_BANK_TRANSFER"
  | "PAY_OFFLINE_PAYMENT"
  | "PAY_IPAY88"
  | "PAY_FREE"
  | "PAY_COD"
  | "PAY_ESUN"
  | "PAY_BILL_PAYMENT"
  | "PAY_INDOMARET"
  | "PAY_KREDIVO"
  | "PAY_NICEPAY_CC"
  | "PAY_ESUN_CB"
  | "PAY_IPAY88_CC"
  | "PAY_AIRPAY_CC"
  | "PAY_BCA_ONE_KLIK"
  | "PAY_SHOPEE_WALLET";
export type Platform =
  | "ios_web"
  | "ios_app"
  | "android_app"
  | "android_web"
  | "pc_web"
  | "other"
  | "web_checkout"
  | "app";
/**
 * one point on one line
 */
export interface Point {
  /**
   * @example 1527234734
   */
  xAxis: number; // int64
  /**
   * @example 237483
   */
  yAxis: number; // float64
}
export type TimeRange = "past1day" | "past7days" | "past30days" | "realtime";
export type UserSource = "new" | "returning";
/**
 * type of value on x axis
 */
export type XType = "time" | "platform" | "country";
